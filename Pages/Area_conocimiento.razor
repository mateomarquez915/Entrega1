@page "/area_conocimiento"
<!--
Define la URL relativa que carga este componente. En este caso, cuando un usuario navega a "/tipo_producto",
este componente Blazor se carga y se representa en la página.
-->
@using BlazorFrontEnd.Services
<!--
// Importa el espacio de nombres BlazorFrontEnd.Services para que puedas utilizar los servicios dentro de este componente.
-->
@inject ApiService ApiService
<!--
// Inyecta una instancia del servicio ApiService. Esto permite que el componente llame a la API a través de este servicio.
-->
@inject IJSRuntime JSRuntime
<!--
// Inyecta IJSRuntime, que es un servicio Blazor para ejecutar JavaScript desde C#.
-->



<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Area de conocimiento</b></h2>
                        <!-- Título de la tabla que indica que se trata de la gestión de productos -->
                    </div>
                    <div class="col-sm-6">
                        <a href="#addArea_conocimientoModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Tipo area de conocimiento</span>
                        </a>
                        <!-- Botón que abre el modal para añadir un nuevo tipo de producto -->
 
                        <a href="#consultarArea_conocimientoModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Tipo de area de conocimiento</span>
                        </a>
                        <!-- Botón que abre el modal para consultar un tipo de producto existente -->
                    </div>
                </div>
            </div>
            @if (Area_conocimientos == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!Area_conocimientos.Any())
            {
                <p>No hay tipos de area de conocimiento registradao.</p>
                <!-- Muestra un mensaje si no hay tipos de productos en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de tipo de productos si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Código</th>
                            <th>Gran area</th>
                            <th>Area</th>
                            <th>Disciplina</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var Area_conocimiento in Area_conocimientos)
                        {
                            <tr>
                                <td>@Area_conocimiento["id"]</td>
                                <!-- Muestra el código del tipo de producto-->
                                <td>@Area_conocimiento["gran_area"]</td>
                                <!-- Muestra la gran_area del tipo de producto -->
                                <td>@Area_conocimiento["area"]</td>
                                <!-- Muestra la area del tipo de producto -->
                                <td>@Area_conocimiento["disciplina"]</td>
                                <!-- Muestra el disciplina del tipo de producto -->
                                
                                <td>
                                    <a href="#editArea_conocimientoModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(Area_conocimiento)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar el tipo de producto-->
 
                                    <a href="#deleteArea_conocimietoModal" class="delete" data-bs-toggle="modal" @onclick="() => SetArea_conocimientoToDelete(Area_conocimiento)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar el tipo del producto-->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
 
<!-- Modal para Añadir/Editar tipo de producto -->
<div class="modal fade" id="addArea_conocimientoModal" tabindex="-1" role="dialog" aria-labelledby="addArea_conocimientoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentArea_conocimiento" OnValidSubmit="SaveArea_conocimiento">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="addArea_conocimientoLabel">@(isNewArea_conocimiento ? "Añadir" : "Editar") Area de conocimiento</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando un tipo de producto -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos del tipo de producto -->
                    <div class="form-group">
                        <label>Id</label>
                        <InputText class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                        <!-- Campo para ingresar el código del tipo de producto -->
                    </div>
                    <div class="form-group">
                        <label>Gran Area</label>
                        <InputText class="form-control" @bind-Value="gran_area" />
                        <ValidationMessage For="@(() => gran_area)" />
                        <!-- Campo para ingresar la gran_area del tipo de producto -->
                    </div>
                    <div class="form-group">
                        <label>Area</label>
                        <InputText class="form-control" @bind-Value="area"   />
                        <ValidationMessage For="@(() => area)" />
                       
                        <!-- Campo para ingresar la area de tipo de producto-->
                    </div>
                    <div class="form-group">
                        <label>Disciplina</label>
                        <InputText class="form-control" @bind-Value="disciplina" />
                        <ValidationMessage For="@(() => disciplina)" />
                        <!-- Campo para ingresar el disciplina del tipo de producto -->
                    </div>
                    
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewArea_conocimiento ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>
 
<!-- Modal para Eliminar tipo de producto -->
<div class="modal fade" id="deleteArea_conocimietoModal" tabindex="-1" role="dialog" aria-labelledby="deleteArea_conocimietoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteArea_conocimietoModalLabel">Eliminar Area conocimiento</h5>
                <!-- Título del modal para eliminar un tipo de producto -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta area de conocimiento?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteArea_conocimiento">Eliminar</button>
                <!-- Botón para confirmar la eliminación del tipo de producto -->
            </div>
        </div>
    </div>
</div>
 
<!-- Modal para Consultar tipo de producto -->
<div class="modal fade" id="consultarArea_conocimientoModal" tabindex="-1" role="dialog" aria-labelledby="consultarArea_conocimientoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarArea_conocimientoModalLabel">Consultar Area de conocimiento</h5>
                <!-- Título del modal para consultar un tipo de producto -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el código y mostrar la información del tipo de producto consultado -->
                <div class="form-group">
                    <label>Código</label>
                    <input type="text" class="form-control" @bind="consultaId" @bind:event="oninput" />
                    <!-- Campo para ingresar el código del tipo de producto a consultar -->
                </div>
                <div class="form-group">
                    <label>gran_area</label>
                    <input type="text" class="form-control" @bind="consultaGran_area" readonly />
                    <!-- Campo para mostrar la gran_area del tipo de producto consultado, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>area</label>
                    <input type="text" class="form-control" @bind="consultaArea" readonly />
                    <!-- Campo para mostrar la area de tipo de producto consultado, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>disciplina</label>
                    <input type="text" class="form-control" @bind="consultaDisciplina" readonly />
                    <!-- Campo para mostrar el disciplina del tipo de producto consultado, es de solo lectura -->
                </div>
               
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarArea_conocimiento">Consultar</button>
                <!-- Botón para realizar la consulta del tipo de producto con el código ingresado -->
                <button type="button" class="btn btn-warning" @onclick="ModificarArea_conocimientoConsultado" disabled="@(!Area_conocimientoEncontrado)">Modificar</button>
                <!-- Botón para modificar el Tipo de producto consultado si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarArea_conocimientoConsultado" disabled="@(!Area_conocimientoEncontrado)">Eliminar</button>
                <!-- Botón para eliminar el Tipo_producto consultado si fue encontrada -->
            </div>
        </div>
    </div>
</div>
 
@code {
   
    private List<Dictionary<string, object>> Area_conocimientos = new List<Dictionary<string, object>>();
    // Lista que almacena los tipos de productos obtenidas desde la API
   
    private Dictionary<string, object> currentArea_conocimiento = new Dictionary<string, object>();
    // Diccionario que representa el tipo de producto actual que se está añadiendo o editando
 
    private bool isNewArea_conocimiento = true;
    // Bandera que indica si se está añadiendo un nuevo tip de producto o editando uno existente
 
    private bool Area_conocimientoEncontrado = false;
    // Bandera que indica si un tipo de producto fue encontrado durante la consulta
 
    private string id = "";
    // Variable que almacena el código del tipo de producto durante la edición o creación
 
    private string gran_area = "";
    // Variable que almacena la gran_area del tipo de producto durante la edición o creación
 
    private string area = "";
    // Variable que almacena la area del tipo de producto durante la edición o creación
 
    private string disciplina = "";
    // Variable que almacena el disciplina del tipo de producto durante la edición o creación
     
    private string consultaId = "";
    // Variable que almacena el id del tipo de producto que se va a consultar
 
    private string consultaGran_area = "";
    // Variable que almacena la gran_area del tipo de producto que se encontró durante la consulta
 
    private string consultaArea = "";
    // Variable que almacena la area del tipo de producto que se encontró durante la consulta
 
    private string consultaDisciplina = "";
    // Variable que almacena el disciplina del tipo de producto que se encontró durante la consulta
    
 
    protected override async Task OnInitializedAsync()
    {
        await LoadArea_conocimientos();
        // Método que se ejecuta al inicializar el componente. Carga la lista del tipo de productos desde la API.
    }
 
    private async Task LoadArea_conocimientos()
    {
        try
        {
            Area_conocimientos = await ApiService.GetDataAsync("api/proyecto/area_conocimiento");
            // Llama a la API para obtener la lista de tipos de producto y la almacena en la variable Area_conocimientos'.
            StateHasChanged();
            // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar area de conocimientos: {ex.Message}");
            // Muestra un error en la consola si la carga de tipo de productos falla.
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar area de conocimientos. Por favor, intente nuevamente.");
            // Muestra una alerta en la página indicando que hubo un error al cargar los Tipo productos
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? Area_conocimiento = null)
    {
        isNewArea_conocimiento = Area_conocimiento == null;
        // Si 'Area_conocimiento' es null, significa que estamos añadiendo un nuevo tipo de producto. De lo contrario, estamos editando.
        currentArea_conocimiento = Area_conocimiento ?? new Dictionary<string, object>();
        // Si 'Area_conocimiento' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la Tipo producto seleccionada.
 
        id = currentArea_conocimiento.TryGetValue("id", out var i) ? i?.ToString() ?? "" : "";
        gran_area = currentArea_conocimiento.TryGetValue("gran_area", out var ca) ? ca.ToString() ?? "" : "";
        area = currentArea_conocimiento.TryGetValue("area", out var cl) ? cl?.ToString() ?? "" : "";
        disciplina = currentArea_conocimiento.TryGetValue("disciplina", out var n) ? n?.ToString() ?? "" : "";
       
        // Extrae los valores de 'id', 'gran_area', 'area' ,'disciplina' de 'Area_conocimiento' y los asigna a las variables correspondientes.
 
        //JSRuntime.InvokeVoidAsync("showModal", "addArea_conocimientoModal");
        // Muestra el modal para añadir o editar tipo de producto usando JavaScript.
    }
 
    private void PrepareForConsulta()
    {
        consultaId = "";
        consultaGran_area = "";
        consultaArea = "";
        consultaDisciplina = "";
        
        Area_conocimientoEncontrado = false;
        // Limpia los campos de consulta y establece 'Tipo_producto' en false.
    }
 
    private void SetArea_conocimientoToDelete(Dictionary<string, object> Area_conocimiento)
    {
        currentArea_conocimiento = Area_conocimiento;
        // Establece el tipo de producto actual como el tipo de producto a eliminar.
        JSRuntime.InvokeVoidAsync("showModal", "deleteArea_conocimietoModal");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
 
 
    }
 
    private async Task SaveArea_conocimiento()
    {
        try
        {
            currentArea_conocimiento["id"] = id;
            currentArea_conocimiento["gran_area"] = gran_area;
            currentArea_conocimiento["area"] = area;
            currentArea_conocimiento["disciplina"] = disciplina;
            
            // Actualiza 'currentArea_conocimiento' con los valores actuales de los campos de entrada.
 
            bool success;
            if (isNewArea_conocimiento)
            {
                success = await ApiService.AddEntityAsync("api/proyecto/area_conocimiento", currentArea_conocimiento);
                await LoadArea_conocimientos();
               
                // Si estamos añadiendo un nuevo tipo de producto, llama a la API para añadir el nuevo tipo de producto.
            }
            else
            {
                success = await ApiService.EditEntityAsync("api/proyecto/area_conocimiento/id", id, currentArea_conocimiento);
                await LoadArea_conocimientos();
                // Si estamos editando un Tipo producto existente, llama a la API para editarla.
            }
 
            if (success)
            {
 
                await JSRuntime.InvokeVoidAsync("hideModal", "addArea_conocimientoModal");
                // Si la operación tiene éxito, cierra el modal.
 
                await LoadArea_conocimientos();
                // Recarga la lista de Tipo de productos para reflejar los cambios.
 
                id = gran_area = area = disciplina = string.Empty;
                currentArea_conocimiento = new Dictionary<string, object>();
                isNewArea_conocimiento = true;
                // Limpia los campos del formulario y restablece el estado.
 
                StateHasChanged();
               
                // Fuerza la actualización de la UI.
               
               await LoadArea_conocimientos();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito1.");
               
               
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el Area conocimiento. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.o
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar Tipo de producto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el Area conocimiento. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }
 
    private async Task DeleteArea_conocimiento()
    {
        try
        {
            if (currentArea_conocimiento.TryGetValue("id", out var codigoObj) && codigoObj is string codigoStr)
            {
               
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/area_conocimiento/id", codigoStr);
                // Si se encuentra el código de el  Tipo de producto actual, llama a la API para eliminarla.
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteArea_conocimietoModal");
                    await LoadArea_conocimientos();
                    await JSRuntime.InvokeVoidAsync("alert", "Area conocimiento eliminado con éxito.");
                    // Si la operación tiene éxito, cierra el modal, recarga la lista de Tipo de producto y muestra un mensaje de éxito.
                }
                else
                {
                   
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el Area conocimiento. Por favor, intente nuevamente.");
                    // Si la operación falla, muestra un mensaje de error.
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar Area conocimiento: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el Area conocimiento. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la eliminación.
        }
    }
 
    private async Task ConsultarArea_conocimiento()
    {
        try
        {
            var resultado = await ApiService.GetDataAsync($"api/proyecto/area_conocimiento/id/{consultaId}");
            if (resultado.Any())
            {
                var Area_conocimientoConsultado = resultado.First();
                consultaGran_area = Area_conocimientoConsultado["gran_area"]?.ToString() ?? "";
                consultaArea = Area_conocimientoConsultado["area"]?.ToString() ?? "";
                consultaDisciplina = Area_conocimientoConsultado["disciplina"]?.ToString() ?? "";
                Area_conocimientoEncontrado = true;
                // Si se encuentra un tipo de prodcuto con el código consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaGran_area = "";
                consultaArea = "";
                consultaDisciplina = "";
               
                Area_conocimientoEncontrado = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna Area conocimiento con ese código.");
                // Si no se encuentra ningun Tipo de producto, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar Area conocimiento: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el Area conocimiento. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }
 
    private async Task ModificarArea_conocimientoConsultado()
    {
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["gran_area"] = consultaGran_area,
            ["area"] = consultaArea,
            ["disciplina"] = consultaDisciplina
            
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarArea_conocimientoModal");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }
 
    private async Task EliminarArea_conocimientoConsultado()
    {
        SetArea_conocimientoToDelete(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["gran_area"] = consultaGran_area,
            ["area"] = consultaArea,
            ["disciplina"] = consultaDisciplina
            
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarArea_conocimientoModal");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
   
}
 