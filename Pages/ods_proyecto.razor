@page "/ods_proyecto"
<!--
Define la URL relativa que carga este componente. En este caso, cuando un usuario navega a "/proyecto_linea",
este componente Blazor se carga y se representa en la página.
-->
@using BlazorFrontEnd.Services
<!--
// Importa el espacio de nombres BlazorFrontEnd.Services para que puedas utilizar los servicios dentro de este componente.
-->
@inject ApiService ApiService
<!--
// Inyecta una instancia del servicio ApiService. Esto permite que el componente llame a la API a través de este servicio.
-->
@inject IJSRuntime JSRuntime
<!--
// Inyecta IJSRuntime, que es un servicio Blazor para ejecutar JavaScript desde C#.
-->
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Ods Proyecto</b></h2>
                        <!-- Título de la tabla que indica que se trata de la gestión de proyecto linea -->
                    </div>
                    <div class="col-sm-6">
                        <a href="#addProyectolineaModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Ods Proyecto</span>
                        </a>
                        <!-- Botón que abre el modal para añadir un nuevo proyecto linea -->
 
                        <a href="#consultarProyectolineaModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar POds Proyecto</span>
                        </a>
                        <!-- Botón que abre el modal para consultar un proyecto linea existente -->
                    </div>
                </div>
            </div>
            @if (proyecto_lineas == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!proyecto_lineas.Any())
            {
                <p>No hay Ods Proyecto registrados.</p>
                <!-- Muestra un mensaje si no hay proyectos linea en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de proyecto linea si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Proyecto</th>
                            <th>Ods</th>
                            
                            
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var proyecto_linea in proyecto_lineas)
                        {
                            <tr>
                                
                                <td>@proyecto_linea["proyecto"]</td>
                                <!-- Muestra el proyecto de proyecto linea -->
                                <td>@proyecto_linea["ods"]</td>
                                <!-- Muestra la linea de investigacion de proyecto linea-->
                               
                                <td>
                                    <a href="#editProyectolineaModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(proyecto_linea)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar proyecto linea -->
 
                                    <a href="#deleteProyectolineaModal" class="delete" data-bs-toggle="modal" @onclick="() => SetProyectolineaToDelete(proyecto_linea)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar proyecto linea-->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
 
<!-- Modal para Añadir/Editar proyecto linea -->
<div class="modal fade" id="addProyectolineaModal" tabindex="-1" role="dialog" aria-labelledby="addProyectolineaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentProyectolinea" OnValidSubmit="SaveProyectolinea">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="addProyectolineaModalLabel">@(isNewProyectolinea ? "Añadir" : "Editar") Ods Proyecto</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando un proyecto linea -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos de proyecto linea -->
                    
                    <div class="form-group">
                        <label>Proyecto</label>
                        <InputText class="form-control" @bind-Value="proyecto" />
                        <ValidationMessage For="@(() => proyecto)" />
                        <!-- Campo para ingresar el proyecto de proyecto linea-->
                    </div>
                    
                    <div class="form-group">
                        <label>Ods</label>
                        <InputText class="form-control" @bind-Value="ods" />
                        <ValidationMessage For="@(() => ods)" />
                        <!-- Campo para ingresar la linea de investigacion de proyecto linea -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewProyectolinea ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>
 
<!-- Modal para Eliminar proyecto linea -->
<div class="modal fade" id="deleteProyectolineaModal" tabindex="-1" role="dialog" aria-labelledby="deleteProyectolineaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteProyectolineaModalLabel">Eliminar Ods Proyecto</h5>
                <!-- Título del modal para eliminar un proyecto linea -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este Ods Proyecto?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteProyectolinea">Eliminar</button>
                <!-- Botón para confirmar la eliminación de proyecto linea -->
            </div>
        </div>
    </div>
</div>
 
<!-- Modal para Consultar proyecto linea -->
<div class="modal fade" id="consultarProyectolineaModal" tabindex="-1" role="dialog" aria-labelledby="consultarProyectolineaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarProyectolineaModalLabel">Consultar Ods Proyecto</h5>
                <!-- Título del modal para consultar un proyecto linea -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el código y mostrar la información de la proyecto linea consultada -->
                
                <div class="form-group">
                    <label>Proyecto</label>
                    <input type="text" class="form-control" @bind="consultaProyecto" readonly />
                    <!-- Campo para mostrar el proyecto de la proyecto linea consultada, es de solo lectura -->
                </div>
                
                <div class="form-group">
                    <label>Ods</label>
                    <input type="text" class="form-control" @bind="consultaOds" readonly />
                    <!-- Campo para mostrar el teléfono de la proyecto linea consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarProyectolinea">Consultar</button>
                <!-- Botón para realizar la consulta del proyecto linea  -->
                <button type="button" class="btn btn-warning" @onclick="ModificarProyectolineaConsultado" disabled="@(!proyecto_lineaEncontrada)">Modificar</button>
                <!-- Botón para modificar el proyecto linea consultado si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarProyectolineaConsultado" disabled="@(!proyecto_lineaEncontrada)">Eliminar</button>
                <!-- Botón para eliminar el proyecto linea consultadosi fue encontrada -->
            </div>
        </div>
    </div>
</div>
 
@code {
   
    private List<Dictionary<string, object>> proyecto_lineas = new List<Dictionary<string, object>>();
    // Lista que almacena las proyecto lineas obtenidas desde la API
   
    private Dictionary<string, object> currentProyectolinea = new Dictionary<string, object>();
    // Diccionario que representa la proyecto linea actual que se está añadiendo o editando
 
    private bool isNewProyectolinea = true;
    // Bandera que indica si se está añadiendo una nueva proyecto linea o editando una existente
 
    private bool proyecto_lineaEncontrada = false;
    // Bandera que indica si una proyecto linea fue encontrada durante la consulta
     
    private string proyecto = "";
    // Variable que almacena el proyecto de la proyecto linea durante la edición o creación
  
    private string ods = "";
    // Variable que almacena el teléfono de la proyecto linea durante la edición o creación
     private string consultaProyecto = "";
    // Variable que almacena el nombre de la proyecto linea que se encontró durante la consulta
  
    private string consultaOds = "";
    // Variable que almacena el teléfono de la proyecto linea que se encontró durante la consulta
 
    protected override async Task OnInitializedAsync()
    {
        await LoadProyectolineas();
        // Método que se ejecuta al inicializar el componente. Carga la lista de proyecto lineas desde la API.
    }
 
    private async Task LoadProyectolineas()
    {
        try
        {
            proyecto_lineas = await ApiService.GetDataAsync("/api/p/ods_proyecto");
            // Llama a la API para obtener la lista de proyecto lineas y la almacena en la variable 'proyecto lineas'.
            StateHasChanged();
            // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar ods proyecto: {ex.Message}");
            // Muestra un error en la consola si la carga de proyecto lineas falla.
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar ods proyecto. Por favor, intente nuevamente.");
            // Muestra una alerta en la página indicando que hubo un error al cargar las proyecto lineas.
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? proyecto_linea = null)
    {
        isNewProyectolinea = proyecto_linea == null;
        // Si 'proyecto linea' es null, significa que estamos añadiendo una nueva proyecto linea. De lo contrario, estamos editando.
        currentProyectolinea = proyecto_linea ?? new Dictionary<string, object>();
        // Si 'proyecto linea' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la proyecto linea seleccionada.
         
        proyecto = currentProyectolinea.TryGetValue("proyecto", out var p) ? p?.ToString() ?? "" : "";
        ods = currentProyectolinea.TryGetValue("ods", out var li) ? li?.ToString() ?? "" : "";
        // Extrae los valores de 'docente', 'proyecto', 'rol' y 'linea_investigacion' de 'currentProyectolinea' y los asigna a las variables correspondientes.
 
        //JSRuntime.InvokeVoidAsync("showModal", "addProyectolineaModal");
        // Muestra el modal para añadir o editar proyecto linea usando JavaScript.
    }
 
    private void PrepareForConsulta()
    {
        consultaProyecto = "";
        consultaOds = "";
        proyecto_lineaEncontrada = false;
        // Limpia los campos de consulta y establece 'proyecto_lineaEncontrada' en false.
    }
 
    private void SetProyectolineaToDelete(Dictionary<string, object> proyecto_linea)
    {
        currentProyectolinea = proyecto_linea;
        // Establece la proyecto linea actual como la proyecto linea a eliminar.
        JSRuntime.InvokeVoidAsync("showModal", "deleteProyectolineaModal");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
 
 
    }
   
 
 
    private async Task SaveProyectolinea()
    {
        try
        {           
            currentProyectolinea["proyecto"] = proyecto;           
            currentProyectolinea["ods"] = ods;
            // Actualiza 'currentProyectolinea' con los valores actuales de los campos de entrada.
 
            bool success;
            if (isNewProyectolinea)
            {
                success = await ApiService.AddEntityAsync("/api/p/ods_proyecto", currentProyectolinea);
                await LoadProyectolineas();
               
                // Si estamos añadiendo una nueva proyecto linea, llama a la API para añadir la nueva proyecto linea.
            }
            else
            {
                success = await ApiService.EditEntityAsync("/api/p/ods_proyecto/proyecto", proyecto, currentProyectolinea);
                await LoadProyectolineas();
                // Si estamos editando una proyecto linea existente, llama a la API para editarla.
            }
 
            if (success)
            {
 
                await JSRuntime.InvokeVoidAsync("hideModal", "addProyectolineaModal");
                // Si la operación tiene éxito, cierra el modal.
 
                await LoadProyectolineas();
                // Recarga la lista de proyecto lineas para reflejar los cambios.
 
                proyecto = ods = string.Empty;
                currentProyectolinea = new Dictionary<string, object>();
                isNewProyectolinea = true;
                // Limpia los campos del formulario y restablece el estado.
 
                StateHasChanged();
               
                // Fuerza la actualización de la UI.
               
               await LoadProyectolineas();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito1.");
               
               
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el ods proyecto. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar ods proyecto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el ods proyecto. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }
 
    private async Task DeleteProyectolinea()
    {
        try
        {
            if (currentProyectolinea.TryGetValue("proyecto", out var codigoObj) && codigoObj is string codigoStr)
            {
               
                bool success = await ApiService.DeleteEntityAsync("/api/p/ods_proyecto/proyecto", codigoStr);
                // Si se encuentra el código de la proyecto linea actual, llama a la API para eliminarla.
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteProyectolineaModal");
                    await LoadProyectolineas();
                    await JSRuntime.InvokeVoidAsync("alert", "ods proyecto eliminado con éxito.");
                    // Si la operación tiene éxito, cierra el modal, recarga la lista de proyecto lineas y muestra un mensaje de éxito.
                }
                else
                {
                   
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el ods proyecto. Por favor, intente nuevamente.");
                    // Si la operación falla, muestra un mensaje de error.
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar ods proyecto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el ods proyecto. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la eliminación.
        }
    }
 
    private async Task ConsultarProyectolinea()
    {
        try
        {
            var resultado = await ApiService.GetDataAsync($"/api/p/ods_proyecto/proyecto/{consultaProyecto}");
            if (resultado.Any())
            {
                var proyectolineaConsultado = resultado.First();

                consultaProyecto = proyectolineaConsultado["proyecto"]?.ToString() ?? "";             
                consultaOds = proyectolineaConsultado["ods"]?.ToString() ?? "";
                proyecto_lineaEncontrada = true;
                // Si se encuentra una proyecto linea con el código consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
               
                consultaOds = "";
                proyecto_lineaEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningun ods proyecto  este proyecto.");
                // Si no se encuentra ninguna proyecto linea, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al ods proyecto linea: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el ods proyecto. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }
 
    private async Task ModificarProyectolineaConsultado()
    {
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["proyecto"] = consultaProyecto,           
            ["ods"] = consultaOds
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarProyectolineaModal");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }
 
    private async Task EliminarProyectolineaConsultado()
    {
        SetProyectolineaToDelete(new Dictionary<string, object>
        {
            
            ["proyecto"] = consultaProyecto,
          
            ["ods"] = consultaOds
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarProyectolineaModal");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
   
}