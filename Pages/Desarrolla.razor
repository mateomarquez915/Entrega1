@page "/desarrolla"
<!--
Define la URL relativa que carga este componente. En este caso, cuando un usuario navega a "/persona",
este componente Blazor se carga y se representa en la página.
-->
@using BlazorFrontEnd.Services
<!--
// Importa el espacio de nombres BlazorFrontEnd.Services para que puedas utilizar los servicios dentro de este componente.
-->
@inject ApiService ApiService
<!--
// Inyecta una instancia del servicio ApiService. Esto permite que el componente llame a la API a través de este servicio.
-->
@inject IJSRuntime JSRuntime
<!--
// Inyecta IJSRuntime, que es un servicio Blazor para ejecutar JavaScript desde C#.
-->
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Desarrolla</b></h2>
                        <!-- Título de la tabla que indica que se trata de la gestión de personas -->
                    </div>
                    <div class="col-sm-6">
                        <a href="#addDesarrollaModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Desarrolla</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva persona -->
 
                        <a href="#consultarDesarrollaModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Desarrolla</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una persona existente -->
                    </div>
                </div>
            </div>
            @if (desarrollas == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!desarrollas.Any())
            {
                <p>No hay personas registradas.</p>
                <!-- Muestra un mensaje si no hay personas en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de personas si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Docente</th>
                            <th>Proyecto</th>
                            <th>Rol</th>
                            <th>Descripcion</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var desarrolla in desarrollas)
                        {
                            <tr>
                                <td>@desarrolla["docente"]</td>
                                <!-- Muestra el código de la persona -->
                                <td>@desarrolla["proyecto"]</td>
                                <!-- Muestra el proyecto de la persona -->
                                <td>@desarrolla["rol"]</td>
                                <!-- Muestra el rol de la persona -->
                                <td>@desarrolla["descripcion"]</td>
                                <!-- Muestra el teléfono de la persona -->
                                <td>
                                    <a href="#editDesarrollaModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(desarrolla)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar la persona -->
 
                                    <a href="#deleteDesarrollaModal" class="delete" data-bs-toggle="modal" @onclick="() => SetDesarrollaToDelete(desarrolla)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar la persona -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
 
<!-- Modal para Añadir/Editar Persona -->
<div class="modal fade" id="addDesarrollaModal" tabindex="-1" role="dialog" aria-labelledby="addDesarrollaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentDesarrolla" OnValidSubmit="SaveDesarrolla">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="addDesarrollaModalLabel">@(isNewDesarrolla ? "Añadir" : "Editar") Desarrolla</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando una persona -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos de la persona -->
                    <div class="form-group">
                        <label>Docente</label>
                        <InputText class="form-control" @bind-Value="docente" />
                        <ValidationMessage For="@(() => docente)" />
                        <!-- Campo para ingresar el código de la persona -->
                    </div>
                    <div class="form-group">
                        <label>Proyecto</label>
                        <InputText class="form-control" @bind-Value="proyecto" />
                        <ValidationMessage For="@(() => proyecto)" />
                        <!-- Campo para ingresar el proyecto de la desarrolla-->
                    </div>
                    <div class="form-group">
                        <label>Rol</label>
                        <InputText class="form-control" @bind-Value="rol"   />
                        <ValidationMessage For="@(() => rol)" />
                       
                    </div>
                    <div class="form-group">
                        <label>Descripcion</label>
                        <InputText class="form-control" @bind-Value="descripcion" />
                        <ValidationMessage For="@(() => descripcion)" />
                        <!-- Campo para ingresar el teléfono de la persona -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewDesarrolla ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>
 
<!-- Modal para Eliminar Persona -->
<div class="modal fade" id="deleteDesarrollaModal" tabindex="-1" role="dialog" aria-labelledby="deleteDesarrollaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteDesarrollaModalLabel">Eliminar Desarrolla</h5>
                <!-- Título del modal para eliminar una persona -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este desarrolla?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteDesarrolla">Eliminar</button>
                <!-- Botón para confirmar la eliminación de la persona -->
            </div>
        </div>
    </div>
</div>
 
<!-- Modal para Consultar Persona -->
<div class="modal fade" id="consultarDesarrollaModal" tabindex="-1" role="dialog" aria-labelledby="consultarDesarrollaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarDesarrollaModalLabel">Consultar Desarrolla</h5>
                <!-- Título del modal para consultar una persona -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el código y mostrar la información de la persona consultada -->
                <div class="form-group">
                    <label>Docente</label>
                    <input type="text" class="form-control" @bind="consultaDocente" @bind:event="oninput" />
                    <!-- Campo para ingresar el código de la persona a consultar -->
                </div>
                <div class="form-group">
                    <label>Proyecto</label>
                    <input type="text" class="form-control" @bind="consultaProyecto" readonly />
                    <!-- Campo para mostrar el proyecto de la persona consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Rol</label>
                    <input type="text" class="form-control" @bind="consultaRol" readonly />
                    <!-- Campo para mostrar el email de la persona consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Descripcion</label>
                    <input type="text" class="form-control" @bind="consultaDescripcion" readonly />
                    <!-- Campo para mostrar el teléfono de la persona consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarDesarrolla">Consultar</button>
                <!-- Botón para realizar la consulta de la persona con el código ingresado -->
                <button type="button" class="btn btn-warning" @onclick="ModificarDesarrollaConsultada" disabled="@(!desarrollaEncontrada)">Modificar</button>
                <!-- Botón para modificar la persona consultada si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarDesarrollaConsultada" disabled="@(!desarrollaEncontrada)">Eliminar</button>
                <!-- Botón para eliminar la persona consultada si fue encontrada -->
            </div>
        </div>
    </div>
</div>
 
@code {
   
    private List<Dictionary<string, object>> desarrollas = new List<Dictionary<string, object>>();
    // Lista que almacena las personas obtenidas desde la API
   
    private Dictionary<string, object> currentDesarrolla = new Dictionary<string, object>();
    // Diccionario que representa la persona actual que se está añadiendo o editando
 
    private bool isNewDesarrolla = true;
    // Bandera que indica si se está añadiendo una nueva persona o editando una existente
 
    private bool desarrollaEncontrada = false;
    // Bandera que indica si una persona fue encontrada durante la consulta
 
    private string docente = "";
    // Variable que almacena el código de la persona durante la edición o creación
 
    private string proyecto = "";
    // Variable que almacena el proyecto de la persona durante la edición o creación
 
    private string rol = "";
    // Variable que almacena el rol de la persona durante la edición o creación
 
    private string descripcion = "";
    // Variable que almacena el teléfono de la persona durante la edición o creación
 
    private string consultaDocente = "";
    // Variable que almacena el código de la persona que se va a consultar
 
    private string consultaProyecto = "";
    // Variable que almacena el nombre de la persona que se encontró durante la consulta
 
    private string consultaRol = "";
    // Variable que almacena el email de la persona que se encontró durante la consulta
 
    private string consultaDescripcion = "";
    // Variable que almacena el teléfono de la persona que se encontró durante la consulta
 
    protected override async Task OnInitializedAsync()
    {
        await LoadDesarrollas();
        // Método que se ejecuta al inicializar el componente. Carga la lista de personas desde la API.
    }
 
    private async Task LoadDesarrollas()
    {
        try
        {
            desarrollas = await ApiService.GetDataAsync("api/proyecto/desarrolla");
            // Llama a la API para obtener la lista de personas y la almacena en la variable 'personas'.
            StateHasChanged();
            // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar desarrolla: {ex.Message}");
            // Muestra un error en la consola si la carga de personas falla.
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar desarrollas. Por favor, intente nuevamente.");
            // Muestra una alerta en la página indicando que hubo un error al cargar las personas.
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? desarrolla = null)
    {
        isNewDesarrolla = desarrolla == null;
        // Si 'persona' es null, significa que estamos añadiendo una nueva persona. De lo contrario, estamos editando.
        currentDesarrolla = desarrolla ?? new Dictionary<string, object>();
        // Si 'persona' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la persona seleccionada.
 
        docente = currentDesarrolla.TryGetValue("docente", out var d) ? d?.ToString() ?? "" : "";
        proyecto = currentDesarrolla.TryGetValue("proyecto", out var p) ? p?.ToString() ?? "" : "";
        rol = currentDesarrolla.TryGetValue("rol", out var r) ? r?.ToString() ?? "" : "";
        descripcion = currentDesarrolla.TryGetValue("descripcion", out var de) ? de?.ToString() ?? "" : "";
        // Extrae los valores de 'docente', 'proyecto', 'rol' y 'descripcion' de 'currentDesarrolla' y los asigna a las variables correspondientes.
 
        //JSRuntime.InvokeVoidAsync("showModal", "addDesarrollaModal");
        // Muestra el modal para añadir o editar persona usando JavaScript.
    }
 
    private void PrepareForConsulta()
    {
        consultaDocente = "";
        consultaProyecto = "";
        consultaRol = "";
        consultaDescripcion = "";
        desarrollaEncontrada = false;
        // Limpia los campos de consulta y establece 'desarrollaEncontrada' en false.
    }
 
    private void SetDesarrollaToDelete(Dictionary<string, object> desarrolla)
    {
        currentDesarrolla = desarrolla;
        // Establece la persona actual como la persona a eliminar.
        JSRuntime.InvokeVoidAsync("showModal", "deleteDesarrollaModal");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
 
 
    }
   
 
 
    private async Task SaveDesarrolla()
    {
        try
        {
            currentDesarrolla["docente"] = docente;
            currentDesarrolla["proyecto"] = proyecto;
            currentDesarrolla["rol"] = rol;
            currentDesarrolla["descripcion"] = descripcion;
            // Actualiza 'currentDesarrolla' con los valores actuales de los campos de entrada.
 
            bool success;
            if (isNewDesarrolla)
            {
                success = await ApiService.AddEntityAsync("api/proyecto/desarrolla", currentDesarrolla);
                await LoadDesarrollas();
               
                // Si estamos añadiendo una nueva persona, llama a la API para añadir la nueva persona.
            }
            else
            {
                success = await ApiService.EditEntityAsync("api/proyecto/desarrolla/docente", docente, currentDesarrolla);
                await LoadDesarrollas();
                // Si estamos editando una persona existente, llama a la API para editarla.
            }
 
            if (success)
            {
 
                await JSRuntime.InvokeVoidAsync("hideModal", "addDesarrollaModal");
                // Si la operación tiene éxito, cierra el modal.
 
                await LoadDesarrollas();
                // Recarga la lista de personas para reflejar los cambios.
 
                docente = proyecto = rol = descripcion = string.Empty;
                currentDesarrolla = new Dictionary<string, object>();
                isNewDesarrolla = true;
                // Limpia los campos del formulario y restablece el estado.
 
                StateHasChanged();
               
                // Fuerza la actualización de la UI.
               
               await LoadDesarrollas();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito1.");
               
               
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el desarrolla. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar persona: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el desarrolla. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }
 
    private async Task DeleteDesarrolla()
    {
        try
        {
            if (currentDesarrolla.TryGetValue("docente", out var codigoObj) && codigoObj is string codigoStr)
            {
               
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/desarrolla/docente", codigoStr);
                // Si se encuentra el código de la persona actual, llama a la API para eliminarla.
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteDesarrollaModal");
                    await LoadDesarrollas();
                    await JSRuntime.InvokeVoidAsync("alert", "Desarrolla eliminada con éxito.");
                    // Si la operación tiene éxito, cierra el modal, recarga la lista de personas y muestra un mensaje de éxito.
                }
                else
                {
                   
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el desarrolla. Por favor, intente nuevamente.");
                    // Si la operación falla, muestra un mensaje de error.
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar desarrolla: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el desarrolla. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la eliminación.
        }
    }
 
    private async Task ConsultarDesarrolla()
    {
        try
        {
            var resultado = await ApiService.GetDataAsync($"api/proyecto/desarrolla/docente/{consultaDocente}");
            if (resultado.Any())
            {
                var personaConsultada = resultado.First();
                consultaProyecto = personaConsultada["proyecto"]?.ToString() ?? "";
                consultaRol = personaConsultada["rol"]?.ToString() ?? "";
                consultaDescripcion = personaConsultada["descripcion"]?.ToString() ?? "";
                desarrollaEncontrada = true;
                // Si se encuentra una persona con el código consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaProyecto = "";
                consultaRol = "";
                consultaDescripcion = "";
                desarrollaEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna desarrolla con ese docente.");
                // Si no se encuentra ninguna persona, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar desarrolla: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el desarrolla. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }
 
    private async Task ModificarDesarrollaConsultada()
    {
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["docente"] = consultaDocente,
            ["proyecto"] = consultaProyecto,
            ["rol"] = consultaRol,
            ["descripcion"] = consultaDescripcion
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarDesarrollaModal");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }
 
    private async Task EliminarDesarrollaConsultada()
    {
        SetDesarrollaToDelete(new Dictionary<string, object>
        {
            ["docente"] = consultaDocente,
            ["proyecto"] = consultaProyecto,
            ["rol"] = consultaRol,
            ["descripcion"] = consultaDescripcion
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarDesarrollaModal");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
   
}
 