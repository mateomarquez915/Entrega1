@page "/cliente"
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Clientes</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#addClienteModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Cliente</span>
                        </a>

                        <a href="#consultarClienteModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Cliente</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (clientes == null)
            {
                <p>Cargando...</p>
            }
            else if (!clientes.Any())
            {
                <p>No hay clientes registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Código Persona</th>
                            <th>Nombre</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Crédito</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cliente in clientes)
                        {
                            <tr>
                                <td>@(cliente.TryGetValue("fkcodpersona", out var codigo) ? (codigo?.ToString() ?? "") : "")</td>
                                <td>@(cliente.TryGetValue("nombre", out var nombre) ? (nombre?.ToString() ?? "Nombre no disponible") : "Nombre no disponible")</td>
                                <td>@(cliente.TryGetValue("email", out var email) ? (email?.ToString() ?? "") : "")</td>
                                <td>@(cliente.TryGetValue("telefono", out var telefono) ? (telefono?.ToString() ?? "") : "")</td>
                                <td>@(cliente.TryGetValue("credito", out var credito) ? (credito?.ToString() ?? "") : "")</td>
                                <td>
                                    <a href="#editClienteModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(cliente)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#deleteClienteModal" class="delete" data-bs-toggle="modal" @onclick="() => SetClienteToDelete(cliente)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Cliente -->
<div class="modal fade" id="addClienteModal" tabindex="-1" role="dialog" aria-labelledby="addClienteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentCliente" OnValidSubmit="SaveCliente">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="addClienteModalLabel">@(isNewCliente ? "Añadir" : "Editar") Cliente</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Código Persona</label>
                        <InputText class="form-control" @bind-Value="codigo" />
                        <ValidationMessage For="@(() => codigo)" />
                    </div>
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="email" @oninput="ValidateEmail" />
                        <ValidationMessage For="@(() => email)" />
                        @if (!string.IsNullOrEmpty(emailErrorMessage))
                         {
                            <div class="text-danger">@emailErrorMessage</div>
                         }
                    </div>
                    <div class="form-group">
                        <label>Teléfono</label>
                        <InputText class="form-control" @bind-Value="telefono" />
                        <ValidationMessage For="@(() => telefono)" />
                    </div>
                    <div class="form-group">
                        <label>Crédito</label>
                        <InputNumber class="form-control" @bind-Value="credito" />
                        <ValidationMessage For="@(() => credito)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewCliente ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Cliente -->
<div class="modal fade" id="deleteClienteModal" tabindex="-1" role="dialog" aria-labelledby="deleteClienteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteClienteModalLabel">Eliminar Cliente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este cliente?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteCliente">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Cliente -->
<div class="modal fade" id="consultarClienteModal" tabindex="-1" role="dialog" aria-labelledby="consultarClienteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarClienteModalLabel">Consultar Cliente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Código Persona</label>
                    <input type="text" class="form-control" @bind="consultaCodigo" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" class="form-control" @bind="consultaNombre" readonly />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="text" class="form-control" @bind="consultaEmail" readonly />
                </div>
                <div class="form-group">
                    <label>Teléfono</label>
                    <input type="text" class="form-control" @bind="consultaTelefono" readonly />
                </div>
                <div class="form-group">
                    <label>Crédito</label>
                    <input type="text" class="form-control" @bind="consultaCredito" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarCliente">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarClienteConsultado" disabled="@(!clienteEncontrado)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarClienteConsultado" disabled="@(!clienteEncontrado)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> clientes = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentCliente = new Dictionary<string, object>();
    private bool isNewCliente = true;
    private bool clienteEncontrado = false;

    private string codigo = "";
    private string nombre = "";
    private string email = "";
    private string telefono = "";
    private double credito = 0;

    private string consultaCodigo = "";
    private string consultaNombre = "";
    private string consultaEmail = "";
    private string consultaTelefono = "";
    private double consultaCredito = 0;

    private string? emailErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadClientes();
    }

    private async Task LoadClientes()
    {
        try
        {
            clientes = await ApiService.GetDataAsync("api/proyecto/cliente");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar clientes. Por favor, intente nuevamente.");
        }
    }

    private void PrepareForAddOrEdit(Dictionary<string, object>? cliente = null)
    {
        isNewCliente = cliente == null;
        currentCliente = cliente ?? new Dictionary<string, object>();
        codigo = currentCliente.TryGetValue("fkcodpersona", out var c) ? c?.ToString() ?? "" : "";
        nombre = currentCliente.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
        email = currentCliente.TryGetValue("email", out var e) ? e?.ToString() ?? "" : "";
        telefono = currentCliente.TryGetValue("telefono", out var t) ? t?.ToString() ?? "" : "";
        credito = currentCliente.TryGetValue("credito", out var cred) ? Convert.ToDouble(cred) : 0;
        JSRuntime.InvokeVoidAsync("showModal", "addClienteModal");
    }

    private void PrepareForConsulta()
    {
        consultaCodigo = "";
        consultaNombre = "";
        consultaEmail = "";
        consultaTelefono = "";
        consultaCredito = 0;
        clienteEncontrado = false;
    }

    private async Task SaveCliente()
    {
        try
        {
            currentCliente["fkcodpersona"] = codigo;
            currentCliente["nombre"] = nombre;
            currentCliente["email"] = email;
            currentCliente["telefono"] = telefono;
            currentCliente["credito"] = credito;

            bool success;
            if (isNewCliente)
            {
                success = await ApiService.AddEntityAsync("api/proyecto/cliente", currentCliente);
            }
            else
            {
                success = await ApiService.EditEntityAsync("api/proyecto/cliente/fkcodpersona", codigo, currentCliente);
            }

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addClienteModal");
                await LoadClientes();
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el cliente. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar cliente: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el cliente. Por favor, intente nuevamente.");
        }
    }

    private async Task DeleteCliente()
    {
        try
        {
            if (currentCliente.TryGetValue("fkcodpersona", out var codigoObj) && codigoObj is string codigoStr)
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/cliente/fkcodpersona", codigoStr);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteClienteModal");
                    await LoadClientes();
                    await JSRuntime.InvokeVoidAsync("alert", "Cliente eliminado con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el cliente. Por favor, intente nuevamente.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar cliente: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el cliente. Por favor, intente nuevamente.");
        }
    }

    private void ValidateEmail(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? string.Empty;
        var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        if (!System.Text.RegularExpressions.Regex.IsMatch(email, emailPattern))
        {
            emailErrorMessage = "El formato del correo electrónico no es válido.";
        }
        else
        {
            emailErrorMessage = null;
        }
    }

    private async Task ConsultarCliente()
    {
        try
        {
            var resultado = await ApiService.GetDataAsync($"api/proyecto/cliente/fkcodpersona/{consultaCodigo}");
            if (resultado.Any())
            {
                var clienteConsultado = resultado.First();
                consultaNombre = clienteConsultado["nombre"]?.ToString() ?? "";
                consultaEmail = clienteConsultado["email"]?.ToString() ?? "";
                consultaTelefono = clienteConsultado["telefono"]?.ToString() ?? "";
                consultaCredito = Convert.ToDouble(clienteConsultado["credito"]);
                clienteEncontrado = true;
            }
            else
            {
                consultaNombre = "";
                consultaEmail = "";
                consultaTelefono = "";
                consultaCredito = 0;
                clienteEncontrado = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningún cliente con ese código.");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar cliente: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el cliente. Por favor, intente nuevamente.");
        }
    }

    private async Task ModificarClienteConsultado()
    {
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["fkcodpersona"] = consultaCodigo,
            ["nombre"] = consultaNombre,
            ["email"] = consultaEmail,
            ["telefono"] = consultaTelefono,
            ["credito"] = consultaCredito
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarClienteModal");
    }

    private async Task EliminarClienteConsultado()
    {
        SetClienteToDelete(new Dictionary<string, object>
        {
            ["fkcodpersona"] = consultaCodigo,
            ["nombre"] = consultaNombre,
            ["email"] = consultaEmail,
            ["telefono"] = consultaTelefono,
            ["credito"] = consultaCredito
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarClienteModal");
    }

    private void SetClienteToDelete(Dictionary<string, object> cliente)
    {
        currentCliente = cliente;
        JSRuntime.InvokeVoidAsync("showModal", "deleteClienteModal");
    }
}
