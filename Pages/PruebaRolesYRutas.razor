@page "/prueba-roles-rutas"
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3>Información del Usuario</h3>

    <div class="mb-3">
        <strong>Email:</strong> @usuarioEmail
    </div>

    <h4>Roles:</h4>
    <ul class="list-unstyled">
        @foreach (var rol in roles)
        {
            <li>@rol</li>
        }
    </ul>

    <h4>Rutas a las que tiene acceso:</h4>
    <ul class="list-unstyled">
        @foreach (var ruta in rutas)
        {
            <li>@ruta</li>
        }
    </ul>
</div>

@code {
    private string usuarioEmail = "";
    private List<string> roles = new List<string>();
    private List<string> rutas = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Obtener el email del sessionStorage
            usuarioEmail = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "usuarioEmail");
            Console.WriteLine($"Email obtenido: {usuarioEmail}");

            // 2. Obtener roles (keys que empiezan con rol_)
            var scriptRoles = @"
                Object.keys(sessionStorage)
                    .filter(key => key.startsWith('rol_'))
                    .map(key => sessionStorage.getItem(key))
            ";
            roles = await JSRuntime.InvokeAsync<List<string>>("eval", scriptRoles);
            Console.WriteLine($"Roles obtenidos: {string.Join(", ", roles)}");

            // 3. Obtener rutas (keys que empiezan con ruta_)
            var scriptRutas = @"
                Object.keys(sessionStorage)
                    .filter(key => key.startsWith('ruta_'))
                    .map(key => sessionStorage.getItem(key))
            ";
            rutas = await JSRuntime.InvokeAsync<List<string>>("eval", scriptRutas);
            Console.WriteLine($"Rutas obtenidas: {string.Join(", ", rutas)}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            
            // También mostrar el error en la consola del navegador
            await JSRuntime.InvokeVoidAsync("console.error", "Error:", ex);
        }
    }
}
